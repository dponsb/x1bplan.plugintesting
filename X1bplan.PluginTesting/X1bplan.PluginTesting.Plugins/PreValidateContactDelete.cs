// <copyright file="PreValidateContactDelete.cs" company="Microsoft">
// Copyright (c) 2013 All Rights Reserved
// </copyright>
// <author>Microsoft</author>
// <date>2/14/2013 12:53:51 PM</date>
// <summary>Implements the PreValidateContactDelete Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace X1bplan.PluginTesting.X1bplan.PluginTesting.Plugins
{
    using System;
    using System.Collections.Generic;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using System.Linq;

    /// <summary>
    /// PreValidateContactDelete Plugin.
    /// </summary>    
    public class PreValidateContactDelete: Plugin
    {
        #region Fields
        private IOrganizationService _service;
        #endregion

        /// <summary>
        /// Initializes a new instance of the <see cref="PreValidateContactDelete"/> class.
        /// </summary>
        public PreValidateContactDelete()
            : base(typeof(PreValidateContactDelete))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(10, "Delete", "contact", new Action<LocalPluginContext>(ExecutePreValidateContactDelete)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePreValidateContactDelete(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            _service = localContext.OrganizationService;

            EntityReference contact = (EntityReference)localContext.PluginExecutionContext.InputParameters["Target"];
            
            if (HasOpenTasks(contact.Id))
            {
                throw new InvalidPluginExecutionException("This Contact has open Tasks associated with it.\n\nPlease resolve all outstanding tasks before deleting.");
            }
        }

        private bool HasOpenTasks(Guid contactId)
        {
            var tasks = GetRelatedTasks(contactId);
            return tasks.Any();
        }

        private IEnumerable<Entity> GetRelatedTasks(Guid contactId)
        {
            QueryExpression query = new QueryExpression()
            {
                EntityName = "task",
                ColumnSet = new ColumnSet(true),
            };

            const int STATE_OPEN = 0;
            query.Criteria.AddCondition(new ConditionExpression("regardingobjectid", ConditionOperator.Equal, contactId));
            query.Criteria.AddCondition(new ConditionExpression("statecode", ConditionOperator.Equal, STATE_OPEN));

            return _service.RetrieveMultiple(query).Entities.ToList<Entity>();
        }
    }
}
